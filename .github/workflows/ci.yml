on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - uses: actions/checkout@v4
    
    # Step 2: Set up .NET (for C# projects)
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x # or whichever version your project uses
        cache: true
        cache-dependency-path: "./src/packages.lock.json"
        
    # Step 3: Restore dependencies for the C# project
    - name: Restore dependencies
      run: dotnet restore --use-lock-file
      working-directory: src
      
    # Step 4: Build the C# project
    - name: Build
      run: dotnet build --no-restore
      working-directory: src
      
    # Step 5: Pull Ollama Docker image
    - name: Pull Ollama Docker image
      run: docker pull ollama/ollama:latest  # Pull latest Ollama image
      
    # Step 6: Run Ollama server container
    - name: Run Ollama server container
      run: docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama

    # Step 7: Load llama3.2:1b model into Ollama server
    - name: Load llama3.2:1b model into Ollama server
      run: docker exec -it ollama ollama run llama3.2:1b
        
    # Step 8: Get the build agent's IP address
    - name: Get build agent IP address
      id: get_ip
      run: echo "BUILD_AGENT_IP=$(hostname -I | awk '{print $1}')" >> $GITHUB_ENV

    # Step 9: Wait for Ollama server to be ready
    - name: Wait for Ollama server
      id: wait_for_server
      run: |
        for i in {1..5}; do
          if curl -s http://$BUILD_AGENT_IP:11434/ | grep -q "Ollama is running"; then
            echo "Ollama server is up and running"
            echo "server_ready=true" >> $GITHUB_ENV
            break
          fi
          echo "Waiting for Ollama server..."
          sleep 5
        done
        if [ -z "$server_ready" ]; then
          echo "Ollama server failed to start"
          exit 1
        fi
        
    # Step 10: Run the integration tests
    - name: Run integration tests
      if: env.server_ready == 'true'
      run: dotnet test --no-build --verbosity normal
      env:
        OLLAMA_SERVER_URL: http://$BUILD_AGENT_IP:11434
      working-directory: tests/OllamaClientLibrary.IntegrationTests
      
    # Step 11: Clean up Ollama
    - name: Stop Ollama container
      run: docker stop ollama-server

  codeql:
    name: "CodeQL"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [ 'csharp' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        cache: true
        cache-dependency-path: "./src/packages.lock.json"
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3